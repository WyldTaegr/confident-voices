enum AccountType {
  None
  Therapist
  Student
}

type User @model @auth(rules: [
  { allow: owner, ownerField: "owner" }
  { allow: public, operations: [read] }
  { allow: private, operations: [create, read, update, delete] }
]) {
  id: ID!
  picture: S3Object @hasOne
  active: AccountType!
  therapist: Therapist @hasOne
  student: Student @hasOne
}

type Therapist @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  parent: Boolean!
  students: [Student] @manyToMany(relationName: "TherapistsStudents")
  children: [Student] @manyToMany(relationName: "ParentsChildren")
}

type Student @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  therapists: [Therapist] @manyToMany(relationName: "TherapistsStudents")
  parents: [Therapist] @manyToMany(relationName: "ParentsChildren")
  progress: [ExerciseProgress] @hasMany
}

type Exercise @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  questions: [Question] @hasMany
}

type Question @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  example: S3Object @hasOne
}

type ExerciseProgress @model @auth(rules: [{allow: public}]) {
  id: ID!
  student: Student! @belongsTo
  progress: [QuestionProgress] @hasMany
}

type QuestionProgress @model @auth(rules: [{allow: public}]) {
  id: ID!
  exerciseProgress: ExerciseProgress! @belongsTo
  question: Question! @hasOne
  completed: Boolean!
  submissions: [S3Object] @hasMany
}

type S3Object @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  key: String
}

type PostInfo @model @auth(rules: [{allow: public}]){
  title: String!
  tags: String!
  description: String!
}
