type User @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  active: String!
  therapist: Therapist @hasOne
  student: Student @hasOne
}

type Therapist @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  user: User @belongsTo
  parent: Boolean!
  students: [Student] @manyToMany(relationName: "TherapistsStudents")
  children: [Student] @manyToMany(relationName: "ParentsChildren")
}

type Student @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  user: User @belongsTo
  therapists: [Therapist] @manyToMany(relationName: "TherapistsStudents")
  parents: [Therapist] @manyToMany(relationName: "ParentsChildren")
  progress: [ExerciseProgress] @hasMany(indexName: "byStudent", fields: ["id"])
}

type Exercise @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  name: String
  questions: [Question] @hasMany(indexName: "byExercise", fields: ["id"])
}

type Question @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  description: String
  example: S3Object @hasOne
  exerciseID: ID! @index(name: "byExercise")
}

type ExerciseProgress @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  student: Student @belongsTo
  progress: [QuestionProgress] @hasMany(indexName: "byExerciseProgress", fields: ["id"])
  studentID: ID @index(name: "byStudent")
}

type QuestionProgress @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  exerciseProgress: ExerciseProgress! @belongsTo
  question: Question! @hasOne
  completed: Boolean!
  submissions: [S3Object] @hasMany(indexName: "byQuestionProgress", fields: ["id"])
  exerciseprogressID: ID! @index(name: "byExerciseProgress")
}

type S3Object @model @auth(rules: [{allow: public}, {allow: private}]) {
  id: ID!
  name: String!
  key: String
  questionprogressID: ID @index(name: "byQuestionProgress")
}

type PostInfo @model @auth(rules: [{allow: public}, {allow: private}]) {
  title: String!
  tags: String!
  description: String!
  likes: Int
}
 