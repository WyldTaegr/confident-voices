type Therapist @model @auth(rules: [{allow: public}]) {
  id: ID!
  parent: Boolean!
  students: [Student] @manyToMany(relationName: "TherapistsStudents")
  children: [Student] @manyToMany(relationName: "ParentsChildren")
}

type Student @model @auth(rules: [{allow: public}]) {
  id: ID!
  therapists: [Therapist] @manyToMany(relationName: "TherapistsStudents")
  parents: [Therapist] @manyToMany(relationName: "ParentsChildren")
  progress: [ExerciseProgress] @hasMany
}

type Exercise @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  questions: [Question] @hasMany
}

type Question @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String!
  example: Recording @hasOne
}

type ExerciseProgress @model @auth(rules: [{allow: public}]) {
  id: ID!
  student: Student! @belongsTo
  progress: [QuestionProgress] @hasMany
}

type QuestionProgress @model @auth(rules: [{allow: public}]) {
  id: ID!
  exerciseProgress: ExerciseProgress! @belongsTo
  question: Question! @hasOne
  completed: Boolean!
  submissions: [Recording] @hasMany
}

type Recording @model @auth(rules: [{allow: public}]) {
  bucket: String!
  region: String!
  key: String!
}

type PostInfo @model @auth(rules: [{allow: public}]){
  title: String!
  tags: String!
  description: String!
}
